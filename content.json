{"meta":{"title":"王智坚的秘密空间","subtitle":"","description":"","author":"王智坚","url":"http://example.com","root":"/"},"pages":[{"title":"about","date":"2022-05-30T14:16:18.000Z","updated":"2022-05-30T14:17:18.300Z","comments":false,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":""}],"posts":[{"title":"数组排序","slug":"数组排序","date":"2022-05-29T07:05:15.000Z","updated":"2022-05-29T09:30:53.671Z","comments":true,"path":"2022/05/29/数组排序/","link":"","permalink":"http://example.com/2022/05/29/%E6%95%B0%E7%BB%84%E6%8E%92%E5%BA%8F/","excerpt":"","text":"数组排序一维数组排序对于排序，Java内置了工具类&#x3D;&#x3D;Arrays.sort&#x3D;&#x3D;,其内部原理使用的是快速排序算法，排序之后的结果为升序。 例如 对于int类型数组 int[] arr = &#123;9,7,8,2,4,3,6,1,5&#125;; 可以使用Arrays.sort进行排序 Arrays.sort(arr); 无需返回值，因为对arr本身进行操作。操作之后返回的结果为 arr=[1,2,3,4,5,6,7,8,9]; 同理，对于String类型数组也是同样的。 String[] strs = &#123;\"b\",\"d\",\"c\",\"a\"&#125;; Arrays.sort(strs); 排序之后的结果按照字典序升序进行排列 strs = [\"a\",\"b\",\"c\",\"d\"]; 那么问题来了，如果我想要的效果是大的排在前面——降序呢？该如何操作呢？ 这就涉及到了内部类与重写的操作了。 自定义排序通过观察java的api文档，对Arrays中的sort方法中，有一个参数&#x3D;&#x3D;Comparator&#x3D;&#x3D; `**sort**(T[] a, Comparator&lt;? super T> c)` 可以通过内部类，自定义比较规则。 例如，对String类型的一维数组降序 String[] strs = &#123;\"b\",\"d\",\"c\",\"a\"&#125;; Arrays.sort(strs, new Comparator&lt;String>()&#123; @Override public int compare(String o1, String o2)&#123; //字符串的比较使用String中的compareTo方法 //compareTo比较之后，结果返回1，表示大于，返回-1，表示小于。 return o2.compareTo(o1); &#125; &#125;); 那么，对于int类型数组是不是一样的操作呢？ int[] arr = &#123;9,7,8,2,4,3,6,1,5&#125;; Arrays.sort(arr, new Comparator&lt;int>()&#123; @Override public int compare(int o1, int o2)&#123; return o2-o1; &#125; &#125;); 然而却得到一个&#x3D;&#x3D;编译时异常&#x3D;&#x3D; 这是为什么呢？ 通过比较两代码发现，&#x3D;&#x3D;int&#x3D;&#x3D;属于基本数据类型，而String属于引用类型，故而将int转换为Integer Integer[] arr = &#123;9,7,8,2,4,3,6,1,5&#125;; Arrays.sort(arr, new Comparator&lt;Integer>()&#123; @Override public int parse(int o1, Integer o2)&#123; return o2-o1; &#125; &#125;); 完美运行~ 二维数组排序上面进行了一维数组的int类型和String类型的排序，那么对于二维数组呢，这又该怎么办呢？ 例如，leetcode第79场双周赛的第二题 经过处理后的到数组 String[][] sendAndWords = &#123;&#123;\"Alice\",\"5\"&#125;, &#123;\"UserTwo\",\"2\"&#125;, &#123;\"userThree\",\"3\"&#125;&#125;; //其中sendAndWords第一列表示的是用户，第二列表示发送的单词数。 /**需求为 1、输出单词数最多的用户。 2、若单词数相同，则按名字字典序最大的输出。 */ 那么我们对这个二维数组的操作为先对第二列降序，在第二列相同的情况下对第一列降序。 利用上面一维数组的思想 String[][] sendAndWords = &#123;&#123;\"Alice\",\"5\"&#125;, &#123;\"UserTwo\",\"2\"&#125;, &#123;\"userThree\",\"3\"&#125;&#125;; Arrays.sort(sendAndWords, new Comparator&lt;String[]>() &#123; @Override public int compare(String[] o1, String[] o2) &#123; // 若单词数相同，那么按照用户名字典序降序 if (o2[1].equals(o1[1])) &#123; return o2[0].compareTo(o1[0]); &#125; // 按单词数降序。 return o2[1].compareTo(o1[1]); &#125; &#125;); 完美运行~","categories":[],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"http://example.com/tags/leetcode/"}]},{"title":"部署hexo","slug":"部署hexo","date":"2022-05-27T15:48:22.000Z","updated":"2022-05-28T13:14:15.256Z","comments":true,"path":"2022/05/27/部署hexo/","link":"","permalink":"http://example.com/2022/05/27/%E9%83%A8%E7%BD%B2hexo/","excerpt":"部署hexo环境配置：git，nodejsgit（Windows版本） 登录&#x3D;&#x3D;git&#x3D;&#x3D;官网 https://git-scm.com/ 点击&#x3D;&#x3D;downloads&#x3D;&#x3D;下载","text":"部署hexo环境配置：git，nodejsgit（Windows版本） 登录&#x3D;&#x3D;git&#x3D;&#x3D;官网 https://git-scm.com/ 点击&#x3D;&#x3D;downloads&#x3D;&#x3D;下载 点击&#x3D;&#x3D;Windows&#x3D;&#x3D; 按电脑位数选择版本 打开cmd（管理员身份运行）命令行 #查看安装版本，以此校验git安装是否成功 git --version nodejs（Windows版本） 前往官网下载&#x3D;&#x3D;nodejs&#x3D;&#x3D; https://nodejs.org/zh-cn/download/ 下载完成后点击安装 安装nodejs，直接点下一步，直至安装完成。 检验安装是否成功 #查看nodejs版本，检验安装是否成功 node -v 安装hexo所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。 npm install -g hexo-cli 建站安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。 hexo init &lt;folder&gt; #将hexo初始化在folder文件夹中 cd &lt;folder&gt; npm install 测试运行在cmd中运行 hexo s #一定要在hexo的根目录中，及folder文件夹中 主题更换（yilia） 根目录下打开&#x3D;&#x3D;git bash&#x3D;&#x3D; 输入 git clone https:&#x2F;&#x2F;github.com&#x2F;litten&#x2F;hexo-theme-yilia.git themes&#x2F;yilia 修改根目录下的&#x3D;&#x3D;_config.yml&#x3D;&#x3D;配置 将&#x3D;&#x3D;theme&#x3D;&#x3D;的值修改为&#x3D;&#x3D;yilia&#x3D;&#x3D; 三连（hexo clean,g,d）查看效果 头像设置 打开&#x3D;&#x3D;yilia&#x3D;&#x3D;下的&#x3D;&#x3D;_config.yml&#x3D;&#x3D;，修改&#x3D;&#x3D;avatar&#x3D;&#x3D;(头像)和&#x3D;&#x3D;favicon&#x3D;&#x3D;(选项卡图标) 此时的路径为相对路径，绝对路径为hexo根目录下的source中。故在source文件夹中放入文件 三连查看效果 部署遇到的问题hexo d失败 swapd文件错误 解决办法： 进入hexo的根目录 删除&#x3D;&#x3D;.deploy_git&#x3D;&#x3D;文件 在根目录右键打开&#x3D;&#x3D;git bash&#x3D;&#x3D; 重新部署 hexo clean hexo g hexo d 网络不稳定 多尝试几次即可。 md中图片不显示 进入hexo的根目录 修改&#x3D;&#x3D;_config.yml&#x3D;&#x3D;的配置，找到&#x3D;&#x3D;post_asset_folder&#x3D;&#x3D;，其默认为&#x3D;&#x3D;false&#x3D;&#x3D;，将其修改为&#x3D;&#x3D;true&#x3D;&#x3D;。 （此后，通过&#x3D;&#x3D;hexo new&#x3D;&#x3D;一个新的文件时，会在文件的同级目录下生成一个同名的文件夹，hexo生成页面时，将其一起打包进一个文件夹中。故接下来要修改md的图片位置） 打开Typora，点击&#x3D;&#x3D;文件&#x3D;&#x3D;-&gt;&#x3D;&#x3D;偏好设置&#x3D;&#x3D;-&gt;&#x3D;&#x3D;图片插入&#x3D;&#x3D;，修改为下图所示。 此时再次三连(hexo clean, hexo g, hexo d)即可。","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2022-05-26T14:45:46.986Z","updated":"2022-05-26T14:45:46.986Z","comments":true,"path":"2022/05/26/hello-world/","link":"","permalink":"http://example.com/2022/05/26/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new \"My New Post\" More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"http://example.com/tags/leetcode/"}]}