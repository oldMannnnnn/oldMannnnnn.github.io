<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>面试-2022-5-30</title>
    <link href="/2022/06/04/%E9%9D%A2%E8%AF%95-2022-5-30/"/>
    <url>/2022/06/04/%E9%9D%A2%E8%AF%95-2022-5-30/</url>
    
    <content type="html"><![CDATA[<h3 id="Java八股文笔记（二）"><a href="#Java八股文笔记（二）" class="headerlink" title="Java八股文笔记（二）"></a>Java八股文笔记（二）</h3><p>[TOC]</p><h4 id="一、hashMap原理"><a href="#一、hashMap原理" class="headerlink" title="一、hashMap原理"></a>一、hashMap原理</h4><h5 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h5><p>​hashMap是由数组+链表组成的。</p><p><img src="/2022/06/04/%E9%9D%A2%E8%AF%95-2022-5-30/1654571092572.png" alt="1654571092572"></p><p>​如上图可知，这是一个&#x3D;&#x3D;Entry&#x3D;&#x3D;节点数组，其中，&#x3D;&#x3D;Entry&#x3D;&#x3D;的源码为</p><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token keyword">implements</span> <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> hash<span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">K</span> key<span class="token punctuation">;</span>        <span class="token class-name">V</span> value<span class="token punctuation">;</span>        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> next<span class="token punctuation">;</span>       <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>​这是我们知道其内部有链表的结构，接着，在观察其&#x3D;&#x3D;put&#x3D;&#x3D;方法</p><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">final</span> <span class="token class-name">V</span> <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> <span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">,</span> <span class="token keyword">boolean</span> onlyIfAbsent<span class="token punctuation">,</span> <span class="token keyword">boolean</span> evict<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">;</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> p<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> i<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        n <span class="token operator">=</span> <span class="token punctuation">(</span>tab <span class="token operator">=</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">=</span> tab<span class="token punctuation">[</span>i <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        tab<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">newNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> e<span class="token punctuation">;</span> <span class="token class-name">K</span> k<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>            <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> p<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            e <span class="token operator">=</span> p<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span>            e <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">)</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putTreeVal</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> tab<span class="token punctuation">,</span> hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> binCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token operator">++</span>binCount<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    p<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">newNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>binCount <span class="token operator">>=</span> TREEIFY_THRESHOLD <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// -1 for 1st</span>                        <span class="token function">treeifyBin</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> hash<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>                    <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                p <span class="token operator">=</span> e<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// existing mapping for key</span>            <span class="token class-name">V</span> oldValue <span class="token operator">=</span> e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>onlyIfAbsent <span class="token operator">||</span> oldValue <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                e<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>            <span class="token function">afterNodeAccess</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token operator">++</span>modCount<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>size <span class="token operator">></span> threshold<span class="token punctuation">)</span>        <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">afterNodeInsertion</span><span class="token punctuation">(</span>evict<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>​观察第六行可以发现，&#x3D;&#x3D;tab&#x3D;&#x3D;数组是一个节点数组，在第七行的if中将老的&#x3D;&#x3D;table&#x3D;&#x3D;赋值给新生成的&#x3D;&#x3D;tab&#x3D;&#x3D;。而第九行的if中，&#x3D;&#x3D;i &#x3D; (n - 1) &amp; hash&#x3D;&#x3D;这个操作就是确定指针i处于第几个位置。而&#x3D;&#x3D;(n - 1) &amp; hash&#x3D;&#x3D;等同于&#x3D;&#x3D;hahs%n&#x3D;&#x3D;。if判断正确则当前指针指向地方无节点，直接插入即可。反之进入else在链表中插入。</p><p>​通过观察源码，我们可以证实hashMap的结构的为数组加链表。</p><h5 id="put方法"><a href="#put方法" class="headerlink" title="put方法"></a>put方法</h5><p>​put源码：</p><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">final</span> <span class="token class-name">V</span> <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> <span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">,</span> <span class="token keyword">boolean</span> onlyIfAbsent<span class="token punctuation">,</span> <span class="token keyword">boolean</span> evict<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">;</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> p<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> i<span class="token punctuation">;</span>    <span class="token comment">/**    * 将table赋值给新声明的tab，tab.length赋值给n。    * 若一者为true，那么table是一个空数组，这是调用resize方法，生成一个新的长度为16的node节点数组    */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        n <span class="token operator">=</span> <span class="token punctuation">(</span>tab <span class="token operator">=</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token comment">/**    * (n - 1) &amp; hash等同于hash%n(二进制运算比取模快)，确定i的值。    * 判断为true那么数组位置i上无节点，直接new一个就行    */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">=</span> tab<span class="token punctuation">[</span>i <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        tab<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">newNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> e<span class="token punctuation">;</span> <span class="token class-name">K</span> k<span class="token punctuation">;</span>        <span class="token comment">/**        * 更新操作，存在key，那么将p赋值给e，随后更新e的value        */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>            <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> p<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            e <span class="token operator">=</span> p<span class="token punctuation">;</span>        <span class="token comment">/**        * 数组后连接的是红黑树的情况下，将节点插入红黑树        */</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span>            e <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">)</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putTreeVal</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> tab<span class="token punctuation">,</span> hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token comment">/**            * 链表插入操作。            */</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> binCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token operator">++</span>binCount<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    p<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">newNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>binCount <span class="token operator">>=</span> TREEIFY_THRESHOLD <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// -1 for 1st</span>                        <span class="token function">treeifyBin</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> hash<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>                    <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                p <span class="token operator">=</span> e<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// existing mapping for key</span>            <span class="token class-name">V</span> oldValue <span class="token operator">=</span> e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>onlyIfAbsent <span class="token operator">||</span> oldValue <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                e<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>            <span class="token function">afterNodeAccess</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token operator">++</span>modCount<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>size <span class="token operator">></span> threshold<span class="token punctuation">)</span>        <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">afterNodeInsertion</span><span class="token punctuation">(</span>evict<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> oldTab <span class="token operator">=</span> table<span class="token punctuation">;</span>    <span class="token keyword">int</span> oldCap <span class="token operator">=</span> <span class="token punctuation">(</span>oldTab <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> oldTab<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">int</span> oldThr <span class="token operator">=</span> threshold<span class="token punctuation">;</span>    <span class="token keyword">int</span> newCap<span class="token punctuation">,</span> newThr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldCap <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldCap <span class="token operator">>=</span> MAXIMUM_CAPACITY<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            threshold <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>            <span class="token keyword">return</span> oldTab<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>newCap <span class="token operator">=</span> oldCap <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> MAXIMUM_CAPACITY <span class="token operator">&amp;&amp;</span>                 oldCap <span class="token operator">>=</span> DEFAULT_INITIAL_CAPACITY<span class="token punctuation">)</span>            newThr <span class="token operator">=</span> oldThr <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// double threshold</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldThr <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// initial capacity was placed in threshold</span>        newCap <span class="token operator">=</span> oldThr<span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>               <span class="token comment">// zero initial threshold signifies using defaults</span>        newCap <span class="token operator">=</span> DEFAULT_INITIAL_CAPACITY<span class="token punctuation">;</span>        newThr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>DEFAULT_LOAD_FACTOR <span class="token operator">*</span> DEFAULT_INITIAL_CAPACITY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>newThr <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">float</span> ft <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>newCap <span class="token operator">*</span> loadFactor<span class="token punctuation">;</span>        newThr <span class="token operator">=</span> <span class="token punctuation">(</span>newCap <span class="token operator">&lt;</span> MAXIMUM_CAPACITY <span class="token operator">&amp;&amp;</span> ft <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>MAXIMUM_CAPACITY <span class="token operator">?</span>                  <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>ft <span class="token operator">:</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    threshold <span class="token operator">=</span> newThr<span class="token punctuation">;</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"rawtypes"</span><span class="token punctuation">,</span><span class="token string">"unchecked"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> newTab <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">[</span>newCap<span class="token punctuation">]</span><span class="token punctuation">;</span>    table <span class="token operator">=</span> newTab<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldTab <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> oldCap<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> e<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> oldTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                oldTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                    newTab<span class="token punctuation">[</span>e<span class="token punctuation">.</span>hash <span class="token operator">&amp;</span> <span class="token punctuation">(</span>newCap <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span>                    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">)</span>e<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> newTab<span class="token punctuation">,</span> j<span class="token punctuation">,</span> oldCap<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token comment">// preserve order</span>                    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> loHead <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> loTail <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> hiHead <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> hiTail <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> next<span class="token punctuation">;</span>                    <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>                        next <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">&amp;</span> oldCap<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>loTail <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                                loHead <span class="token operator">=</span> e<span class="token punctuation">;</span>                            <span class="token keyword">else</span>                                loTail<span class="token punctuation">.</span>next <span class="token operator">=</span> e<span class="token punctuation">;</span>                            loTail <span class="token operator">=</span> e<span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>hiTail <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                                hiHead <span class="token operator">=</span> e<span class="token punctuation">;</span>                            <span class="token keyword">else</span>                                hiTail<span class="token punctuation">.</span>next <span class="token operator">=</span> e<span class="token punctuation">;</span>                            hiTail <span class="token operator">=</span> e<span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> next<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>loTail <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        loTail<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                        newTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> loHead<span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>hiTail <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        hiTail<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                        newTab<span class="token punctuation">[</span>j <span class="token operator">+</span> oldCap<span class="token punctuation">]</span> <span class="token operator">=</span> hiHead<span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> newTab<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token function">newNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> <span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>​通过观察其源码，我们可以知道其如何插入的原理。知道其如何确定数组位置，如何插入节点，以及存在相同key时的更新操作。</p><h4 id="二、HashMap线程安全"><a href="#二、HashMap线程安全" class="headerlink" title="二、HashMap线程安全"></a>二、HashMap线程安全</h4><p>​HashMap不是线程安全的，但在java5之后，有了一个线程安全的HashMap——ConcurrentHashMap。若是应用在多线程环境下，那么可以使用HashTable。</p><ul><li><p>HashTable 是线程安全的。HashTable 容器使用 synchronized 来保证线程安全，但在线程竞争激烈的情况下 HashTable 的效率非常低下.</p></li><li><p>使用ConcurrentHashMap ，分段锁的思想，将 HashMap 进行切割，把 HashMap 中的哈希数组切分成小数组，每个小数组有 n 个 HashEntry 组成，其中小数组继承自ReentrantLock（可重入锁），这个小数组名叫Segment（JDK1.7）</p><p><img src="/2022/06/04/%E9%9D%A2%E8%AF%95-2022-5-30/1654575347581.png" alt="1654575347581"></p><p>JDK1.8中取消了Segment 分段锁，采用 CAS + synchronized 来保证并发安全，ConcurrentHashMap 中 synchronized 只锁定当前链表或红黑二叉树的首节点，只要节点hash不冲突，就不会产生并发。</p><p><img src="/2022/06/04/%E9%9D%A2%E8%AF%95-2022-5-30/1654575461769.png" alt="1654575461769"></p></li><li><p>使用Collections.synchronizedMap方法，对方法进行加同步锁；</p></li></ul><h4 id="三、优先队列的是实现原理"><a href="#三、优先队列的是实现原理" class="headerlink" title="三、优先队列的是实现原理"></a>三、优先队列的是实现原理</h4><p>​普通的队列是先进先出的数据结构，而优先队列为元素赋予优先级，具有最高优先级的元素成为队列首部。</p><p>优先队列一般基于二叉堆实现。</p><h5 id="二叉堆的基本原理"><a href="#二叉堆的基本原理" class="headerlink" title="二叉堆的基本原理"></a>二叉堆的基本原理</h5><h6 id="什么是二叉堆"><a href="#什么是二叉堆" class="headerlink" title="什么是二叉堆"></a>什么是二叉堆</h6><ul><li>完全二叉树</li><li>堆的根节点的优先级最大（即最大或最小）</li><li>父节点的优先级必定大于子节点，兄弟节点的优先级不确定谁大谁小</li></ul><h6 id="堆的用途"><a href="#堆的用途" class="headerlink" title="堆的用途"></a>堆的用途</h6><p>​取最值。</p><h6 id="堆的基本操作"><a href="#堆的基本操作" class="headerlink" title="堆的基本操作"></a>堆的基本操作</h6><ul><li><p>插入</p><p>往堆插入元素，基本思想是<strong>从最后一个位置开始，通过上浮操作不断调整位置，直到满足父节点的优先级必定大于子节点这个条件</strong>。</p><ul><li><p>上浮</p><p><strong>上浮</strong>是往二叉堆添加元素用到的操作，它其实是<strong>不断的调整k的位置为父元素的位置</strong>直到满足条件为止。</p><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 用数组表示堆</span><span class="token class-name">Object</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>objs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">/** * 上浮： * k表示堆的最后一个位置； * obj表示将要插入的元素。 */</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">siftUp</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 1. 判断k是否为根元素的位置0，如果是则直接赋值</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>k<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 2. 获取父元素的位置,parent = (k-1)/2</span>        <span class="token keyword">int</span> parent <span class="token operator">=</span> <span class="token punctuation">(</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">>>></span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment">// 3. 如果父元素的优先级大于等于obj，跳出循环并插入obj</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>objs<span class="token punctuation">[</span>parent<span class="token punctuation">]</span> <span class="token operator">>=</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 4. 如果父元素的优先级小于obj，将父元素赋值到k的位置，更改k为父元素的位置，继续循环</span>        objs<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> objs<span class="token punctuation">[</span>parent<span class="token punctuation">]</span><span class="token punctuation">;</span>        k <span class="token operator">=</span> parent<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 5. 为obj赋值</span>    objs<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 添加元素，不考虑数组扩容的情况。 * 假设size表示当前堆包含的元素个数（注意不一定等于上面定义的10） */</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>size<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        objs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token function">siftUp</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        size<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></li></ul></li><li><p>删除</p><p>删除指定位置的元素，其基本思想是<strong>从指定位置开始，把最后一个元素放到被删除元素的位置，通过下沉或者上浮操作，使得堆满足父元素优先级大于子元素的条件。</strong></p><ul><li><p>下沉</p><p><strong>下沉</strong>是删除时用到的操作。它是把最后一个元素放到被删除元素的位置，然后重新调整使得堆满足条件的过程。</p><ol><li><p>当<strong>被删除元素的位置</strong>位于<strong>最后一个元素的父元素的位置</strong>后面时，可以直接把最后一个元素插入到被删除元素的位置；然后再进行上浮操作。</p></li><li><p>否则，需要执行下沉操作。</p><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 用数组表示堆</span><span class="token class-name">Object</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>objs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">/** * k被删除元素的位置； * obj堆的最后一个元素； *  假设size为当前堆包含元素的个数（不一定是上面定义的10） */</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">siftDown</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 1. 找到最后一个元素的父节点的位置, (最后一个元素位置-1) / 2</span>    <span class="token keyword">int</span> parent <span class="token operator">=</span> <span class="token punctuation">(</span>size<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">>>></span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">// 2. 判断k是否在父节点位置之后，如果在之前则需要下沉操作</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>k <span class="token operator">&lt;=</span> parent<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 3.获取k的左右子节点的位置</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> k<span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span><span class="token number">2</span> <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment">// 4.选择左右子节点中优先级最高的一个</span>        <span class="token keyword">int</span> best<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>objs<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">></span> objs<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            best <span class="token operator">=</span> left<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            best <span class="token operator">=</span> right<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 5.判断obj和best的优先级谁高。如果obj优先级高，则跳出循环直接赋值，否则继续下沉</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">>=</span> objs<span class="token punctuation">[</span>best<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        objs<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> objs<span class="token punctuation">[</span>best<span class="token punctuation">]</span><span class="token punctuation">;</span>        k <span class="token operator">=</span> best<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 6.赋值</span>    objs<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 删除第p个元素。 */</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 1.获取最后一个元素</span>    <span class="token class-name">Object</span> obj <span class="token operator">=</span> objs<span class="token punctuation">[</span>size<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 2.如果p不等于最后一个元素</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> size<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 3.把最后一个元素和p进行下沉操作</span>        <span class="token function">siftDown</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>objs<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">==</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 4. 上浮</span>            <span class="token function">siftUp</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    size<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></li></ol></li></ul></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Java八股文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面试-2022-5-18</title>
    <link href="/2022/06/04/%E9%9D%A2%E8%AF%95-2022-5-18/"/>
    <url>/2022/06/04/%E9%9D%A2%E8%AF%95-2022-5-18/</url>
    
    <content type="html"><![CDATA[<h3 id="Java八股文笔记（一）"><a href="#Java八股文笔记（一）" class="headerlink" title="Java八股文笔记（一）"></a>Java八股文笔记（一）</h3><h4 id="一、Final原理"><a href="#一、Final原理" class="headerlink" title="一、Final原理"></a>一、Final原理</h4><h5 id="作用在变量上"><a href="#作用在变量上" class="headerlink" title="作用在变量上"></a>作用在变量上</h5><ul><li><p>基本类型变量</p><p>当一个final修饰基本类型变量时，变量需立即初始化，且之后不允许修改变量的值。所以一般用final修饰基本类型变量时都是常量，那么变量名全为大写。</p><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">int</span> STUDENT_AGE <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">final</span> <span class="token keyword">char</span> STUDENT_SEX <span class="token operator">=</span> <span class="token char">'m'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></li><li><p>引用类型</p><p>当一个final修饰引用类型变量时，由于引用类型指向的是地址值，故对于当前变量的地址值之后无法修改，而地址值指向的内容是可以修改的。</p><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Student</span> wzj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"wzj"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> length <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><p>如下图所示</p><p><img src="/2022/06/04/%E9%9D%A2%E8%AF%95-2022-5-18/1654349338028.png" alt="1654349338028"></p><p>基本类型指向了常量的地址值，而引用类型指向的同样是地址值，但地址值中的东西可以修改。</p></li></ul><h5 id="作用在方法上"><a href="#作用在方法上" class="headerlink" title="作用在方法上"></a>作用在方法上</h5><p>作用在方法上时，若有子类继承此类，那么子类无法对该方法进行重载。一旦final修饰方法，那么在编译的时候已经静态绑定了，所以final方法比非final方法块。</p><h5 id="作用在类上"><a href="#作用在类上" class="headerlink" title="作用在类上"></a>作用在类上</h5><p>作用在类上时，表示该类无法被继承，那么final就不能修饰抽象类，这与抽象类的思想完全相反。若一个类修饰为final类，那么里面的方法默认为final方法。</p><h5 id="final域的重排序"><a href="#final域的重排序" class="headerlink" title="final域的重排序"></a>final域的重排序</h5><h6 id="先写入final变量，后调用该对象"><a href="#先写入final变量，后调用该对象" class="headerlink" title="先写入final变量，后调用该对象"></a>先写入final变量，后调用该对象</h6><p>在构造函数对一个final对象的写入，与该构造函数被一个引用对象与引用，这之间不能重排序。</p><h6 id="先读对象的引用，在读final变量"><a href="#先读对象的引用，在读final变量" class="headerlink" title="先读对象的引用，在读final变量"></a>先读对象的引用，在读final变量</h6><p>读一个包含final域的对象，与读这个final变量，这之间不能重排序。</p><h4 id="二、CMS与G1-的区别"><a href="#二、CMS与G1-的区别" class="headerlink" title="二、CMS与G1 的区别"></a>二、CMS与G1 的区别</h4><h5 id="CMS垃圾收集"><a href="#CMS垃圾收集" class="headerlink" title="CMS垃圾收集"></a>CMS垃圾收集</h5><h6 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h6><ul><li>CMS是老年代并发GC算法：(ConcurrentMark-SweepGC、CMS GC)。</li><li>算法总体逻辑：标记-清除（Mark-Sweep)</li></ul><h6 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h6><p>总体流程为：初始标记&#x3D;&gt; 并发标记&#x3D;&gt; 重新标记&#x3D;&gt; 并发清理。</p><p>详细流程如下：</p><ol><li><p>初始标记（Initial Mark)（</p><p>STW </p><p>）</p><ol><li>此阶段会暂停虚拟机（<strong>STW</strong>)，由根对象扫描出所有的关联对象，并做出标记。此过程只会导致JVM短暂暂停。</li></ol></li><li><p>并发标记（Concurrent Marking)</p><ol><li>恢复所有暂停的线程对象，并且对之前标记过的对象进行扫描，取得所有跟标记对象有关联的对象。</li></ol></li><li><p>并发预清理（Concurrent Precleaning)</p><ol><li>査找所有在并发标记阶段新进入老年代的对象(例如一些对象可能从新生代晋升到老年代，或者有一些对象被分配到老年代）通过重新扫描，减少下一阶段的工作。</li></ol></li><li><p>重新标记（Remark)（</p><p>STW </p><p>）</p><ol><li>此阶段会暂停虚拟机（<strong>STW</strong>），对在并发标记阶段被改变的引用或新创建的对象进行标记。</li></ol></li><li><p>并发清理（Concurrent Sweeping)</p><ol><li>恢复所有暂停的应用线程，对所有未标记的垃圾对象进行清理，并且尽量将己回收对象的空间重新拼凑为一个整体。在此阶段收集器线程和应用程序线程并发执行。</li></ol></li><li><p>并发重置（Concurrent Reset)</p><ol><li>重置CMS收集器的数据结构，等待下一次垃圾回收。</li></ol></li></ol><h6 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h6><ol><li>支持并发收集。</li><li>低停顿。<ol><li>垃圾收集过程中最耗时的并发标记和并发清除过程，CMS可以在这两个过程中和用户线程一起工作。所以，用户线程在这个时候就不用停下来了。</li></ol></li></ol><h6 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h6><ol><li>对CPU非常敏感。<ol><li>在并发阶段虽然不会导致用户线程停顿，但是会占用了一部分线程，若CPU资源不足会使应用程序变慢。</li></ol></li><li>无法处理浮动垃圾。<ol><li>在最后一步并发清理过程中，用户线程执行也会产生垃圾，但是这部分垃圾是在标记之后，所以只有等到下一次gc的时候清理掉，这部分垃圾叫浮动垃圾。</li><li>由于并发清理的时候，用户线程也在运行，就需要保证用户线程在运行的时候需要留有部分内存以供使用。但是当这部分内存不足以给用户线程正常使用时，就会出现一次 “Concurrent Mode Failure”，一旦出现了“Concurrent Mode Failure”，便会开启后备方案，临时使用SerialOld收集器进行收集工作。</li></ol></li><li>CMS使用“标记-清理”算法会产生大量的空间碎片。<ol><li>当碎片过多，将会给大对象空间的分配带来很大的麻烦，往往会出现老年代还有很大的空间但无法找到足够大的连续空间来分配当前对象，不得不提前触发一次FullGC。</li></ol></li><li>新的JDK会逐渐移除CMS<ol><li>JDK9：将CMS标记为废弃（Depracated）。</li><li>JDK14：直接删除CMS</li></ol></li></ol><h5 id="G1垃圾收集"><a href="#G1垃圾收集" class="headerlink" title="G1垃圾收集"></a>G1垃圾收集</h5><h6 id="流程-1"><a href="#流程-1" class="headerlink" title="流程"></a>流程</h6><h6 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h6><ul><li><p>G1（Garbage-First）可以收集回收新生代和老年代。</p></li><li><p>G1垃圾收集器采用的是区域化、分布式的垃圾收集器。其核心思想是将整个堆内存区域划分成大小相同的子区域（Region)，在<a href="https://so.csdn.net/so/search?q=JVM&spm=1001.2101.3001.7020">JVM</a>启动时会自动设置这些子区域的大小（区域大小范围为1MB〜32MB，最多可以设置2048个区域，即支持的最大内存为32MB*2048&#x3D;65536MB&#x3D;64GB内存），这样Eden、Survivor、Tenured就变为了一系列不连续的内存区域，也就避免了全内存区的GC操作。G1收集器的内存分配如图1所示。</p><p><img src="/2022/06/04/%E9%9D%A2%E8%AF%95-2022-5-18/1654353796486.png" alt="1654353796486"></p></li></ul><h6 id="新生代的GC流程"><a href="#新生代的GC流程" class="headerlink" title="新生代的GC流程"></a>新生代的GC流程</h6><p>保存空间的大小会根据之前的对象大小进行重新计算。计算与对象的复制过程中依然会产生很短暂的暂停(STW),并且整个回收过程中会有多个回收线程并发收集。收集流程下图所示：</p><p><img src="/2022/06/04/%E9%9D%A2%E8%AF%95-2022-5-18/1654353849824.png" alt="1654353849824"></p><h6 id="老年代的GC流程"><a href="#老年代的GC流程" class="headerlink" title="老年代的GC流程"></a>老年代的GC流程</h6><p>G1的老年代GC操作流程与CMS类似，并且在整个回收过程中依然会产生短暂的停顿。</p><ol><li><p>初始标记（</p><p>STW </p><p>）</p><ol><li><p>在此阶段会产生一个初始标记（InitialMark),此阶段会产生停顿（STW)，同时也会触发一次年轻代垃圾回收（MinorGC)，此时内存关系参考图1所示。</p><p><img src="/2022/06/04/%E9%9D%A2%E8%AF%95-2022-5-18/1654354151836.png" alt="1654354151836">图1：初始化标记阶段</p></li></ol></li><li><p>根区域（Region)扫描</p><ol><li>在初始标记的存活区扫描对老年代的引用，并且对相关引用对象进行标记，该阶段与其他应用线程（非STW)同时运行。只有完成该阶段后，才能开始下一次STW年轻代垃圾回收。</li></ol></li><li><p>并发标记</p><ol><li><p>在堆内存中进行并发标记（与其他应用线程同时运行），在此过程中有可能被年轻代GC打断。</p></li><li><p>在此阶段，如果发现某一区域内全部为垃圾对象，那么会立即回收此区域的内存空间。而在此阶段也会计算每个区域的对象活跃度（该区域中存活对象的比例）。</p></li><li><p>此阶段内存关系如图2所示。</p><p><img src="/2022/06/04/%E9%9D%A2%E8%AF%95-2022-5-18/1654354165692.png" alt="1654354165692">图2：并发标记阶段</p></li></ol></li><li><p>重新标记（</p><p>STW</p><p>）</p><ol><li><p>此阶段主要是用于收集并发标记阶段产生的垃圾空间产生短暂停顿（<strong>STW</strong>)。</p></li><li><p>G1收集器对该阶段使用了比CMS更高效的初始快照算法SATB(Snapshot-At-The-Beginning)</p></li><li><p>此阶段的内存关系如图3所示</p><p><img src="/2022/06/04/%E9%9D%A2%E8%AF%95-2022-5-18/1654354175870.png" alt="1654354175870">图3：重新标记阶段</p></li></ol></li><li><p>并行</p><p>清理（</p><p>STW</p><p>）</p><ol><li>清理所有标记的垃圾内存空间，此阶段会产生短暂停顿（<strong>STW</strong>)。</li><li>此阶段会清除记录集合（RememberSets)并将空白区域重置。</li></ol></li><li><p>复制阶段</p><ol><li><p>将回收区域的存活对象复制到没有使用过的新区域（Region)。</p></li><li><p>清理复制阶段内存参考关系如图4所示。</p><p><img src="/2022/06/04/%E9%9D%A2%E8%AF%95-2022-5-18/1654354188807.png" alt="1654354188807">图4：复制阶段</p></li></ol></li></ol><p>当整个操作执行完成后的内存关系如图5所示：</p><p><img src="/2022/06/04/%E9%9D%A2%E8%AF%95-2022-5-18/1654354916955.png" alt="1654354916955">图5：G1老年代内存垃圾收集结束</p><h5 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h5><p><strong>1、并行与并发</strong></p><p>​        G1能充分利用CPU、多核环境下的硬件优势，使用多个CPU（CPU或者CPU核心）来缩短stop-The-World停顿时间。部分其他收集器原本需要停顿Java线程执行的GC动作，G1收集器仍然可以通过并发的方式让java程序继续执行。</p><p><strong>2、分代收集</strong></p><p>​        分代概念在G1中依然得以保留。虽然G1可以不需要其它收集器配合就能独立管理整个GC堆，但它能够采用不同的方式去处理新创建的对象、已经存活了一段时间、熬过多次GC的旧对象以获取更好的收集效果。也就是说G1可以自己管理新生代和老年代了。</p><p><strong>3、不产生内存碎片</strong></p><p>​        由于G1使用了独立区域（Region）概念，G1从整体来看是基于“标记-整理”算法实现收集，从局部（两个Region）上来看是基于“复制”算法实现的，但无论如何，这两种算法都意味着G1运作期间不会产生内存空间碎片。</p><p><strong>4、可预测的停顿</strong></p><p>​        降低停顿时间是G1和CMS共同的关注点，但G1除了追求低停顿外，还能建立可预测的停顿时间模型，能让使用这明确指定一个长度为M毫秒的时间段内，消耗在垃圾收集上的时间不得超过N毫秒。</p><h5 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h5><ol><li>不产生内存碎片</li><li>可指定最大停顿时间<ol><li>这样可以让系统很少有较长的停顿时间。<ol><li>对于短的停顿时间：G1 未必比 CMS短</li><li>对于长的停顿时间：G1 的长的停顿时间的次数比CMS少很多。</li></ol></li></ol></li></ol><h5 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h5><ol><li>内存占用高<ol><li>堆内存被划分为许多个小的Region分区数量，面对跨Region对象引用问题，每个Region分区都需要独立维护一份记忆集，使得用于维持G1正常运行的额外内存空间占到了总堆内存空间的10%~20%。</li></ol></li><li>执行负载高<ol><li>CMS用写后屏障来更新维护卡表</li><li>G1除了使用写后屏障来更新维护卡表外，为了实现原始快照搜索算法，还使用写前屏障来跟踪并发时的指针变化情况。</li></ol></li></ol><h5 id="CMS与G1的区别"><a href="#CMS与G1的区别" class="headerlink" title="CMS与G1的区别"></a>CMS与G1的区别</h5><table><thead><tr><th align="center"><strong>项</strong></th><th align="center"><strong>CMS（</strong>Concurrent Mark Sweep<strong>）</strong></th><th align="center"><strong>G1（</strong>Garbage-First<strong>）</strong></th></tr></thead><tbody><tr><td align="center"><strong>目的</strong></td><td align="center">获取最短回收停顿时间（牺牲吞吐量）。面向互联网网站或者B&#x2F;S服务端，减小停顿时间。</td><td align="center">减少长停顿的次数、增加吞吐量。为了替代CMS（JDK11默认使用G1）。面向服务端应用。</td></tr><tr><td align="center"><strong>回收的代</strong></td><td align="center">回收老年代</td><td align="center">回收新生代和老年代</td></tr><tr><td align="center"><strong>算法</strong></td><td align="center">标记-清除</td><td align="center">从整体来看是“标记-整理”算法；从局部上来看“复制”算法</td></tr><tr><td align="center"><strong>内存碎片</strong></td><td align="center">会产生内存碎片</td><td align="center">不会产生内存碎片</td></tr><tr><td align="center"><strong>过程</strong></td><td align="center">初始标记&#x3D;&gt; 并发标记&#x3D;&gt; 重新标记&#x3D;&gt; <strong>并发</strong>清理</td><td align="center">初始标记&#x3D;&gt; 并发标记&#x3D;&gt; 重新标记&#x3D;&gt; <strong>并行</strong>清理</td></tr><tr><td align="center"><strong>使用场景</strong></td><td align="center">资源较少（处理器少、内存小）。CMS 在小内存应用上的表现要优于 G1，而大内存应用上 G1 更有优势，大小内存的界限是6GB到8GB。</td><td align="center">多核处理器、大内存。实时数据占用超过一半的堆空间。 对象分配或者晋升的速度变化大。 希望消除长时间的GC停顿（超过0.5-1秒）。</td></tr></tbody></table><h4 id="三、JVM调优"><a href="#三、JVM调优" class="headerlink" title="三、JVM调优"></a>三、JVM调优</h4><p>通过前面的文章对JVM已经进行了简单的了解了，也知道了各种垃圾收集器以及其配置，那么这篇文章我们就简单地进行实例讲解了，如何进行JVM调优？JVM调优我们具体调整什么？为什么要调整这部分？怎么调整？</p><h5 id="GC的评估指标"><a href="#GC的评估指标" class="headerlink" title="GC的评估指标"></a>GC的评估指标</h5><p>进行JVM调优主要针对下面几个方面：</p><ul><li><strong>吞吐量：</strong> 吞吐量指的是运行用户代码占总时间的比例，它有一个计算公式为：<strong>吞吐量 &#x3D; 应用程序运行的时间&#x2F; (应用程序运行的时间 + GC回收的时间)</strong>; 举个例子，假设程序运行时间为100s，GC垃圾回收时间为1秒，则吞吐量为100&#x2F;(1+100) &#x3D; 99%；<strong>如果这个值越小代表着垃圾回收占用的时间越多，GC垃圾回收占用时间多的原因就是堆内存不足导致垃圾回收的频率太多</strong>；</li><li><strong>GC负荷：</strong> GC负荷是与吞吐量相对的一个概念，指的是GC花费时间的百分比；其计算公式为：**GC负荷 &#x3D; GC回收的时间&#x2F; (应用程序运行的时间 + GC回收的时间)**。</li><li><strong>响应时间：</strong> 这里的响应时间是GC执行垃圾回收时导致的STW的时间，这段时间除了GC其它所有线程都是停止的，当然我们期望的暂停时间越小越好。</li><li><strong>GC频率：</strong> GC频率指的是在时间单位内GC进行垃圾回收的次数，当然<strong>GC频率与响应时间是反比的</strong>。假设堆内存一定的情况下，GC执行的频率越大代表着响应时间越小，而GC执行频率越小代表着响应时间越大。</li><li><strong>反应速度：</strong> 反应速度指的是一个对象变成垃圾一直到被回收所耗费的时间。</li></ul><p>在我们讲垃圾回收的时候讲了一个收集器Parallel收集器，这个收集器就是注重吞吐量的，这个收集器是JDK默认的垃圾回收器。<br>响应时间优先的垃圾收集器，CMS收集器(老年代) &#x2F;ParNew(新生代)。<br>G1收集器两者兼顾</p><h5 id="怎么进行JVM调优"><a href="#怎么进行JVM调优" class="headerlink" title="怎么进行JVM调优"></a>怎么进行JVM调优</h5><p>上面简单的说明了几个GC性能进行评估的指标，在实际操作中我们<strong>主要以吞吐量、响应时间优先</strong>，所以最终JVM调优后的代码我们期望看到的是<strong>高吞吐量+低响应时间</strong>。</p><ol><li>首先肯定需要考虑的是堆内存的大小，要合理的设置堆内存大小，怎么配置堆内存大小呢，这个可以借鉴腾讯云服务器给出的答案。<br><img src="/2022/06/04/%E9%9D%A2%E8%AF%95-2022-5-18/1654356247887.png" alt="1654356247887"><br>这是腾讯云服务器选型，按照选型的参照有一定访问量的我们就按照2G设置，并发适中的4G设置，并发比较大的设置8G+。当然这个是服务器的内存大小，但是这个默认服务器只有我们的应用程序没有其他很耗费内存的应用。</li><li>第二点启动的时候堆内存初始值和最大值保持一致，防止内存不足垃圾回收后导致的内存扩大浪费时间，包括像新生代等有初始值和最大值的都尽量设置为同样的参数。</li><li>不要去主动的调用System.gc()方法，会导致垃圾回收，而且是Full GC的，触发STW机制。</li><li>设置大对象存放参数，超过的放在老年代，因为大对象比较大在新生代里面拷过来拷过去的很浪费性能，而且会导致GC频繁，设置参数为：**-XX:PretenureSizeThreshold**。</li><li>根据项目的情况合理的选择垃圾收集器，怎么选择垃圾收集器呢，这有个建议：还是按照上面的三种类型，2GB的使用Parallel收集器，这是以吞吐量优先的收集器，是默认的垃圾收集器，设置参数为 <strong>-XX:+UseParallelOldGC</strong>；对于4GB的使用CMS收集器，注重服务器的响应速度，系统停顿时间最短，设置参数为 <strong>-XX:+UseConcMarkSweepGC</strong>；对于8G甚至更大的使用G1收集器，将大内存设置成了多个小区域，而且回收按照区域优先级进行的，可以保证高吞吐量的同时做到低响应时间，设置参数为 <strong>-XX:+UseG1GC</strong>。</li><li>设置了不同的垃圾收集器还要根据实际的GC日志进行分析来调整其他参数进行调优。</li><li>这是最重要的一点，其实<strong>大多数情况是代码不合格</strong>。其实优化代码带来的性能提升远比优化JVM参数要大的多。</li></ol><h5 id="如何分析内存溢出问题"><a href="#如何分析内存溢出问题" class="headerlink" title="如何分析内存溢出问题"></a>如何分析内存溢出问题</h5><p>先写个演示代，演示代码是一直进行死循环创建对象放到list中，这样创建的对象是可达的。</p><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java">   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token number">123456</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>打开jvisualvm分析工具后选中我们写的程序，找到抽样器进行内存抽样，下面两个图为抽样结果<br><img src="/2022/06/04/%E9%9D%A2%E8%AF%95-2022-5-18/1654356262059.png" alt="1654356262059"><br>首先看这张图，我们抽样出来的堆柱状图，这下面的列表是每种对象所使用的空间大小，没有告诉我们哪里导致的的内存溢出，但是我们可以得出结论创建的String对象太多导致了堆内存溢出。<br>再选中每个线程分配<br><img src="/2022/06/04/%E9%9D%A2%E8%AF%95-2022-5-18/1654356315134.png" alt="1654356315134"><br>看一下线程分配情况，这个列表是每个线程使用的堆内存大小，我们可以看到main线程占用了绝大部分的堆空间，几乎占满了，这个时候就可以定位到内存溢出可能是因为main线程创建了大量的String对象导致的，然后去排查main线程里面的代码是否有问题。<br>这里其实可以看到一个阿里巴巴开发规范中的提到的规范：<strong>每个线程都要创建一个属于自己的名字</strong>。有了这个线程名字是不是就查找起来方便多了，要是一堆线程名叫Thread1、Thread2。。。看到这个也找不到导致内存溢出的线程。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Java八股文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数组排序</title>
    <link href="/2022/05/29/%E6%95%B0%E7%BB%84%E6%8E%92%E5%BA%8F/"/>
    <url>/2022/05/29/%E6%95%B0%E7%BB%84%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h3 id="数组排序"><a href="#数组排序" class="headerlink" title="数组排序"></a>数组排序</h3><h4 id="一维数组排序"><a href="#一维数组排序" class="headerlink" title="一维数组排序"></a>一维数组排序</h4><p>对于排序，Java内置了工具类&#x3D;&#x3D;Arrays.sort&#x3D;&#x3D;,其内部原理使用的是快速排序算法，排序之后的结果为升序。</p><ul><li><p>例如</p><p>对于int类型数组</p><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>可以使用Arrays.sort进行排序</p><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>无需返回值，因为对arr本身进行操作。操作之后返回的结果为</p><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java">arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>同理，对于String类型数组也是同样的。</p><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> strs <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"d"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>strs<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><p>排序之后的结果按照字典序升序进行排列</p><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java">strs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">,</span><span class="token string">"d"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></li></ul><p>那么问题来了，如果我想要的效果是大的排在前面——降序呢？该如何操作呢？</p><p>这就涉及到了内部类与重写的操作了。</p><h4 id="自定义排序"><a href="#自定义排序" class="headerlink" title="自定义排序"></a>自定义排序</h4><p>通过观察java的api文档，对Arrays中的sort方法中，有一个参数&#x3D;&#x3D;Comparator&#x3D;&#x3D;</p><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java">`<span class="token operator">*</span><span class="token operator">*</span>sort<span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span>  <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">></span></span> c<span class="token punctuation">)</span>`<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>可以通过内部类，自定义比较规则。</p><ul><li><p>例如，对String类型的一维数组降序</p><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> strs <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"d"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>strs<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">String</span> o1<span class="token punctuation">,</span> <span class="token class-name">String</span> o2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          <span class="token comment">//字符串的比较使用String中的compareTo方法</span>          <span class="token comment">//compareTo比较之后，结果返回1，表示大于，返回-1，表示小于。</span>          <span class="token keyword">return</span> o2<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>o1<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>那么，对于int类型数组是不是一样的操作呢？</p><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token keyword">int</span> o1<span class="token punctuation">,</span> <span class="token keyword">int</span> o2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> o2<span class="token operator">-</span>o1<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>然而却得到一个&#x3D;&#x3D;编译时异常&#x3D;&#x3D;</p><p><img src="/2022/05/29/%E6%95%B0%E7%BB%84%E6%8E%92%E5%BA%8F/../../../%E7%AC%94%E8%AE%B0/hexo/source/_posts/%E6%95%B0%E7%BB%84%E6%8E%92%E5%BA%8F/1653812670549.png" alt="1653812670549"></p><p>这是为什么呢？</p><p>通过比较两代码发现，&#x3D;&#x3D;int&#x3D;&#x3D;属于基本数据类型，而String属于引用类型，故而将int转换为Integer</p><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">parse</span><span class="token punctuation">(</span><span class="token keyword">int</span> o1<span class="token punctuation">,</span> <span class="token class-name">Integer</span> o2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> o2<span class="token operator">-</span>o1<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p><img src="/2022/05/29/%E6%95%B0%E7%BB%84%E6%8E%92%E5%BA%8F/1653814055658.png" alt="1653814055658"></p><p>完美运行~</p></li></ul><h4 id="二维数组排序"><a href="#二维数组排序" class="headerlink" title="二维数组排序"></a>二维数组排序</h4><p>上面进行了一维数组的int类型和String类型的排序，那么对于二维数组呢，这又该怎么办呢？</p><ul><li><p>例如，leetcode第79场双周赛的第二题</p><p>经过处理后的到数组</p><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sendAndWords <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token string">"Alice"</span><span class="token punctuation">,</span><span class="token string">"5"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                           <span class="token punctuation">&#123;</span><span class="token string">"UserTwo"</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                           <span class="token punctuation">&#123;</span><span class="token string">"userThree"</span><span class="token punctuation">,</span><span class="token string">"3"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//其中sendAndWords第一列表示的是用户，第二列表示发送的单词数。</span><span class="token comment">/**需求为  1、输出单词数最多的用户。  2、若单词数相同，则按名字字典序最大的输出。*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>那么我们对这个二维数组的操作为先对第二列降序，在第二列相同的情况下对第一列降序。</p><p>利用上面一维数组的思想</p><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sendAndWords <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token string">"Alice"</span><span class="token punctuation">,</span><span class="token string">"5"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                           <span class="token punctuation">&#123;</span><span class="token string">"UserTwo"</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                           <span class="token punctuation">&#123;</span><span class="token string">"userThree"</span><span class="token punctuation">,</span><span class="token string">"3"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>sendAndWords<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> o1<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> o2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 若单词数相同，那么按照用户名字典序降序</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>o1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> o2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>o1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 按单词数降序。</span>        <span class="token keyword">return</span> o2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>o1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>完美运行~</p><p><img src="/2022/05/29/%E6%95%B0%E7%BB%84%E6%8E%92%E5%BA%8F/1653816639187.png" alt="1653816639187"></p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>部署hexo</title>
    <link href="/2022/05/27/%E9%83%A8%E7%BD%B2hexo/"/>
    <url>/2022/05/27/%E9%83%A8%E7%BD%B2hexo/</url>
    
    <content type="html"><![CDATA[<h4 id="部署hexo"><a href="#部署hexo" class="headerlink" title="部署hexo"></a>部署hexo</h4><h5 id="环境配置：git，nodejs"><a href="#环境配置：git，nodejs" class="headerlink" title="环境配置：git，nodejs"></a>环境配置：git，nodejs</h5><h6 id="git（Windows版本）"><a href="#git（Windows版本）" class="headerlink" title="git（Windows版本）"></a>git（Windows版本）</h6><ol><li><p>登录&#x3D;&#x3D;git&#x3D;&#x3D;官网 <a href="https://git-scm.com/">https://git-scm.com/</a> 点击&#x3D;&#x3D;downloads&#x3D;&#x3D;下载</p><p><img src="/2022/05/27/%E9%83%A8%E7%BD%B2hexo/gitOfficialWebsite.png" alt="1653655831928"></p><span id="more"></span></li><li><p>点击&#x3D;&#x3D;Windows&#x3D;&#x3D;</p><p><img src="/2022/05/27/%E9%83%A8%E7%BD%B2hexo/gitPlayStation.png" alt="1653655951795"></p></li><li><p>按电脑位数选择版本</p><p><img src="/2022/05/27/%E9%83%A8%E7%BD%B2hexo/gitDownloadVersion.png" alt="1653655976607"></p></li><li><p>打开cmd（管理员身份运行）命令行</p><div class="code-wrapper"><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">#查看安装版本，以此校验git安装是否成功git --version<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><p><img src="/2022/05/27/%E9%83%A8%E7%BD%B2hexo/gitVersion.png" alt="1653661006444"></p></li></ol><h6 id="nodejs（Windows版本）"><a href="#nodejs（Windows版本）" class="headerlink" title="nodejs（Windows版本）"></a>nodejs（Windows版本）</h6><ol><li><p>前往官网下载&#x3D;&#x3D;nodejs&#x3D;&#x3D; <a href="https://nodejs.org/zh-cn/download/">https://nodejs.org/zh-cn/download/</a></p><p><img src="/2022/05/27/%E9%83%A8%E7%BD%B2hexo/nodejsDownloadPage.png" alt="1653662276898"></p></li><li><p>下载完成后点击安装</p><p>安装nodejs，直接点下一步，直至安装完成。</p></li><li><p>检验安装是否成功</p><div class="code-wrapper"><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">#查看nodejs版本，检验安装是否成功node -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><p><img src="/2022/05/27/%E9%83%A8%E7%BD%B2hexo/nodejsVersion.png" alt="1653662680884"></p></li></ol><h5 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h5><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</p><div class="code-wrapper"><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">npm install -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h5 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h5><p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p><div class="code-wrapper"><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">hexo init &lt;folder&gt; #将hexo初始化在folder文件夹中cd &lt;folder&gt;npm install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><h5 id="测试运行"><a href="#测试运行" class="headerlink" title="测试运行"></a>测试运行</h5><p>在cmd中运行</p><div class="code-wrapper"><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">hexo s #一定要在hexo的根目录中，及folder文件夹中<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p><img src="/2022/05/27/%E9%83%A8%E7%BD%B2hexo/hexoTest.png" alt="1653663635399"></p><p><img src="/2022/05/27/%E9%83%A8%E7%BD%B2hexo/testResult.png" alt="1653663719815"></p><h4 id="主题更换（yilia）"><a href="#主题更换（yilia）" class="headerlink" title="主题更换（yilia）"></a>主题更换（yilia）</h4><ol><li><p>根目录下打开&#x3D;&#x3D;git bash&#x3D;&#x3D;</p></li><li><p>输入</p><div class="code-wrapper"><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">git clone https:&#x2F;&#x2F;github.com&#x2F;litten&#x2F;hexo-theme-yilia.git themes&#x2F;yilia<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></li><li><p>修改根目录下的&#x3D;&#x3D;_config.yml&#x3D;&#x3D;配置</p><p>将&#x3D;&#x3D;theme&#x3D;&#x3D;的值修改为&#x3D;&#x3D;yilia&#x3D;&#x3D;</p></li><li><p>三连（hexo clean,g,d）查看效果</p><p><img src="/2022/05/27/%E9%83%A8%E7%BD%B2hexo/1653722155749.png" alt="1653722155749"></p></li><li><p>头像设置</p><p>打开&#x3D;&#x3D;yilia&#x3D;&#x3D;下的&#x3D;&#x3D;_config.yml&#x3D;&#x3D;，修改&#x3D;&#x3D;avatar&#x3D;&#x3D;(头像)和&#x3D;&#x3D;favicon&#x3D;&#x3D;(选项卡图标)</p><p><img src="/2022/05/27/%E9%83%A8%E7%BD%B2hexo/1653724499349.png" alt="1653724499349"></p><p>此时的路径为相对路径，绝对路径为hexo根目录下的source中。故在source文件夹中放入文件</p><p><img src="/2022/05/27/%E9%83%A8%E7%BD%B2hexo/1653724632555.png" alt="1653724632555"></p><p>三连查看效果</p></li></ol><h4 id="部署遇到的问题"><a href="#部署遇到的问题" class="headerlink" title="部署遇到的问题"></a>部署遇到的问题</h4><h5 id="hexo-d失败"><a href="#hexo-d失败" class="headerlink" title="hexo d失败"></a>hexo d失败</h5><ul><li><p>swapd文件错误</p><p><img src="/2022/05/27/%E9%83%A8%E7%BD%B2hexo/1653721963180.png" alt="1653721963180"></p><p>解决办法：</p><ol><li><p>进入hexo的根目录</p></li><li><p>删除&#x3D;&#x3D;.deploy_git&#x3D;&#x3D;文件</p></li><li><p>在根目录右键打开&#x3D;&#x3D;git bash&#x3D;&#x3D;</p></li><li><p>重新部署</p><div class="code-wrapper"><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">hexo cleanhexo ghexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></li></ol></li><li><p>网络不稳定</p><p><img src="/2022/05/27/%E9%83%A8%E7%BD%B2hexo/1653722998916.png" alt="1653722998916"></p><p>多尝试几次即可。</p></li></ul><h5 id="md中图片不显示"><a href="#md中图片不显示" class="headerlink" title="md中图片不显示"></a>md中图片不显示</h5><ol><li><p>进入hexo的根目录</p></li><li><p>修改&#x3D;&#x3D;_config.yml&#x3D;&#x3D;的配置，找到&#x3D;&#x3D;post_asset_folder&#x3D;&#x3D;，其默认为&#x3D;&#x3D;false&#x3D;&#x3D;，将其修改为&#x3D;&#x3D;true&#x3D;&#x3D;。</p><p>（此后，通过&#x3D;&#x3D;hexo new&#x3D;&#x3D;一个新的文件时，会在文件的同级目录下生成一个同名的文件夹，hexo生成页面时，将其一起打包进一个文件夹中。故接下来要修改md的图片位置）</p></li><li><p>打开Typora，点击&#x3D;&#x3D;文件&#x3D;&#x3D;-&gt;&#x3D;&#x3D;偏好设置&#x3D;&#x3D;-&gt;&#x3D;&#x3D;图片插入&#x3D;&#x3D;，修改为下图所示。</p><p><img src="/2022/05/27/%E9%83%A8%E7%BD%B2hexo/1653720865785.png" alt="1653720865785"></p></li><li><p>此时再次三连(hexo clean, hexo g, hexo d)即可。</p></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/05/26/hello-world/"/>
    <url>/2022/05/26/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
